{"ast":null,"code":"var _jsxFileName = \"E:\\\\Users\\\\Pinsho\\\\Documents\\\\Projects\\\\myfavmods\\\\src\\\\components\\\\MusicModsGrid.js\",\n    _s2 = $RefreshSig$();\n\nimport styles from '../css/Grid.module.css';\nimport { MusicDawCard } from './MusicDawCard';\nimport { MusicVstCard } from './MusicVstCard';\nimport { MusicSamplesCard } from './MusicSamplesCard';\nimport Airtable from 'airtable';\nimport React, { useEffect, useState } from 'react';\nimport { Spinner } from './Spinner';\nimport NoResults from '../pages/NoResults';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst base = new Airtable({\n  apiKey: \"key03qIMV5bFoWdvj\"\n}).base('appxdFddKFJGA9LAb');\nexport function MusicModsGrid() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [daws, setDaws] = useState([]);\n  const [vsts, setVsts] = useState([]);\n  const [samples, setSamples] = useState([]);\n  const [isLoading, SetIsLoading] = useState(true);\n\n  function useQuery() {\n    _s();\n\n    return new URLSearchParams(useLocation().search);\n  }\n\n  _s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n    return [useLocation];\n  });\n\n  const query = useQuery();\n  const search = query.get(\"search\");\n  useEffect(() => {\n    SetIsLoading(true);\n    const filter = search ? search : \"\";\n    const formulaDAW = \"SUM(Search('\" + filter.toLowerCase() + \"', {Name_low}),Search('\" + filter.toLowerCase() + \"', {Developer_low}),Search('\" + filter.toLowerCase() + \"', {Platform_low}))\";\n    const formulaVST = \"SUM(Search('\" + filter.toLowerCase() + \"', {Name_low}),Search('\" + filter.toLowerCase() + \"', {Developer_low}),Search('\" + filter.toLowerCase() + \"', {Platform_low}),Search('\" + filter.toLowerCase() + \"', {Type_low}))\";\n    const formulaSamples = \"SUM(Search('\" + filter.toLowerCase() + \"', {Name_low}),Search('\" + filter.toLowerCase() + \"', {Developer_low}),Search('\" + filter.toLowerCase() + \"', {Genre_low}))\";\n    base(\"musicdaw\").select({\n      view: \"Grid view\",\n      filterByFormula: formulaDAW,\n      sort: [{\n        field: 'Name',\n        direction: 'asc'\n      }]\n    }).eachPage((records, fetchNextPage) => {\n      setDaws(records);\n      fetchNextPage();\n    });\n    base(\"musicvst\").select({\n      view: \"Grid view\",\n      filterByFormula: formulaVST,\n      sort: [{\n        field: 'Name',\n        direction: 'asc'\n      }]\n    }).eachPage((records, fetchNextPage) => {\n      setVsts(records);\n      fetchNextPage();\n    });\n    base(\"musicsamples\").select({\n      view: \"Grid view\",\n      filterByFormula: formulaSamples,\n      sort: [{\n        field: 'Name',\n        direction: 'asc'\n      }]\n    }).eachPage((records, fetchNextPage) => {\n      setSamples(records);\n      SetIsLoading(false);\n      fetchNextPage();\n    });\n  }, [search]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (daws.length === 0 && vsts.length === 0 && samples.length === 0) {\n    return /*#__PURE__*/_jsxDEV(NoResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.maintitleMusicDaw,\n      id: \"daws\",\n      children: \"DAWs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.grid,\n      children: daws.map(daw => /*#__PURE__*/_jsxDEV(MusicDawCard, {\n        daw: daw\n      }, daw.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.maintitleMusicVST,\n      id: \"vsts\",\n      children: \"VSTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.grid,\n      children: vsts.map(vst => /*#__PURE__*/_jsxDEV(MusicVstCard, {\n        vst: vst\n      }, vst.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.maintitleMusicSamples,\n      id: \"samples\",\n      children: \"Samples\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.grid,\n      children: samples.map(sample => /*#__PURE__*/_jsxDEV(MusicSamplesCard, {\n        sample: sample\n      }, sample.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(MusicModsGrid, \"kJ1B0Bxb+DGypBlHTYhHi9CcK4M=\", true);\n\n_c = MusicModsGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicModsGrid\");","map":{"version":3,"sources":["E:/Users/Pinsho/Documents/Projects/myfavmods/src/components/MusicModsGrid.js"],"names":["styles","MusicDawCard","MusicVstCard","MusicSamplesCard","Airtable","React","useEffect","useState","Spinner","NoResults","useLocation","base","apiKey","MusicModsGrid","daws","setDaws","vsts","setVsts","samples","setSamples","isLoading","SetIsLoading","useQuery","URLSearchParams","search","query","get","filter","formulaDAW","toLowerCase","formulaVST","formulaSamples","select","view","filterByFormula","sort","field","direction","eachPage","records","fetchNextPage","length","maintitleMusicDaw","grid","map","daw","id","maintitleMusicVST","vst","maintitleMusicSamples","sample"],"mappings":"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","sourcesContent":["import styles from '../css/Grid.module.css';\r\nimport { MusicDawCard } from './MusicDawCard';\r\nimport { MusicVstCard } from './MusicVstCard';\r\nimport { MusicSamplesCard } from './MusicSamplesCard';\r\nimport Airtable from 'airtable';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Spinner } from './Spinner';\r\nimport NoResults from '../pages/NoResults';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst base = new Airtable({ apiKey: \"key03qIMV5bFoWdvj\" }).base('appxdFddKFJGA9LAb');\r\n\r\nexport function MusicModsGrid() {\r\n    const [daws, setDaws] =useState([])\r\n    const [vsts, setVsts] =useState([])\r\n    const [samples, setSamples] = useState([])\r\n    const [isLoading, SetIsLoading] = useState(true);\r\n\r\n    function useQuery() {\r\n        return new  URLSearchParams(useLocation().search);\r\n    }\r\n\r\n    const query = useQuery();\r\n    const search = query.get(\"search\");\r\n\r\n    useEffect(() => {\r\n        SetIsLoading(true);\r\n\r\n        const filter = search \r\n        ? search\r\n        : \"\";\r\n\r\n        const formulaDAW = \"SUM(Search('\" + filter.toLowerCase() + \"', {Name_low}),Search('\" + filter.toLowerCase() + \"', {Developer_low}),Search('\" + filter.toLowerCase() + \"', {Platform_low}))\";\r\n        const formulaVST = \"SUM(Search('\" + filter.toLowerCase() + \"', {Name_low}),Search('\" + filter.toLowerCase() + \"', {Developer_low}),Search('\" + filter.toLowerCase() + \"', {Platform_low}),Search('\" + filter.toLowerCase() + \"', {Type_low}))\";\r\n        const formulaSamples = \"SUM(Search('\" + filter.toLowerCase() + \"', {Name_low}),Search('\" + filter.toLowerCase() + \"', {Developer_low}),Search('\" + filter.toLowerCase() + \"', {Genre_low}))\";\r\n\r\n        base(\"musicdaw\")\r\n            .select({ \r\n                view: \"Grid view\",\r\n                filterByFormula: formulaDAW,\r\n                sort:[\r\n                    {\r\n                        field: 'Name', direction: 'asc'\r\n                    }\r\n                ],\r\n            })\r\n            .eachPage((records, fetchNextPage) => {\r\n                setDaws(records)\r\n                fetchNextPage();\r\n            })\r\n        base(\"musicvst\")\r\n            .select({ \r\n                view: \"Grid view\",\r\n                filterByFormula: formulaVST,\r\n                sort:[\r\n                    {\r\n                        field: 'Name', direction: 'asc'\r\n                    }\r\n                ],\r\n            })\r\n            .eachPage((records, fetchNextPage) => {\r\n                setVsts(records)\r\n                fetchNextPage();\r\n            })\r\n        base(\"musicsamples\")\r\n            .select({ \r\n                view: \"Grid view\",\r\n                filterByFormula: formulaSamples,\r\n                sort:[\r\n                    {\r\n                        field: 'Name', direction: 'asc'\r\n                    }\r\n                ],\r\n            })\r\n            .eachPage((records, fetchNextPage) => {\r\n                setSamples(records)\r\n                SetIsLoading(false);\r\n                fetchNextPage();\r\n            })\r\n    }, [search]);\r\n\r\n    if (isLoading){\r\n        return(\r\n            <Spinner/>\r\n        )\r\n    }\r\n\r\n    if(daws.length === 0 && vsts.length === 0 && samples.length === 0){\r\n        return(\r\n            <NoResults/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.maintitleMusicDaw} id=\"daws\">DAWs</div>\r\n            <ul className={styles.grid}>\r\n                {daws.map((daw) => (\r\n                    <MusicDawCard key={daw.id} daw={daw} />\r\n                ))}\r\n            </ul>\r\n            <div className={styles.maintitleMusicVST} id=\"vsts\">VSTs</div>\r\n            <ul className={styles.grid}>\r\n                {vsts.map((vst) => (\r\n                    <MusicVstCard key={vst.id} vst={vst} />\r\n                ))}\r\n            </ul>\r\n            <div className={styles.maintitleMusicSamples} id=\"samples\">Samples</div>\r\n            <ul className={styles.grid}>\r\n                {samples.map((sample) => (\r\n                    <MusicSamplesCard key={sample.id} sample={sample} />\r\n                ))}\r\n            </ul>\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}
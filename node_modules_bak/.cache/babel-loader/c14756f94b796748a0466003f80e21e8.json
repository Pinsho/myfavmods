{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar record_1 = __importDefault(require(\"./record\"));\n\nvar callback_to_promise_1 = __importDefault(require(\"./callback_to_promise\"));\n\nvar has_1 = __importDefault(require(\"./has\"));\n\nvar query_params_1 = require(\"./query_params\");\n/**\n * Builds a query object. Won't fetch until `firstPage` or\n * or `eachPage` is called.\n *\n * Params should be validated prior to being passed to Query\n * with `Query.validateParams`.\n */\n\n\nvar Query =\n/** @class */\nfunction () {\n  function Query(table, params) {\n    this._table = table;\n    this._params = params;\n    this.firstPage = callback_to_promise_1.default(firstPage, this);\n    this.eachPage = callback_to_promise_1.default(eachPage, this, 1);\n    this.all = callback_to_promise_1.default(all, this);\n  }\n  /**\n   * Validates the parameters for passing to the Query constructor.\n   *\n   * @params {object} params parameters to validate\n   *\n   * @return an object with two keys:\n   *  validParams: the object that should be passed to the constructor.\n   *  ignoredKeys: a list of keys that will be ignored.\n   *  errors: a list of error messages.\n   */\n\n\n  Query.validateParams = function (params) {\n    var validParams = {};\n    var ignoredKeys = [];\n    var errors = [];\n\n    for (var _i = 0, _a = keys_1.default(params); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var value = params[key];\n\n      if (has_1.default(Query.paramValidators, key)) {\n        var validator = Query.paramValidators[key];\n        var validationResult = validator(value);\n\n        if (validationResult.pass) {\n          validParams[key] = value;\n        } else {\n          errors.push(validationResult.error);\n        }\n      } else {\n        ignoredKeys.push(key);\n      }\n    }\n\n    return {\n      validParams: validParams,\n      ignoredKeys: ignoredKeys,\n      errors: errors\n    };\n  };\n\n  Query.paramValidators = query_params_1.paramValidators;\n  return Query;\n}();\n/**\n * Fetches the first page of results for the query asynchronously,\n * then calls `done(error, records)`.\n */\n\n\nfunction firstPage(done) {\n  if (!isFunction_1.default(done)) {\n    throw new Error('The first parameter to `firstPage` must be a function');\n  }\n\n  this.eachPage(function (records) {\n    done(null, records);\n  }, function (error) {\n    done(error, null);\n  });\n}\n/**\n * Fetches each page of results for the query asynchronously.\n *\n * Calls `pageCallback(records, fetchNextPage)` for each\n * page. You must call `fetchNextPage()` to fetch the next page of\n * results.\n *\n * After fetching all pages, or if there's an error, calls\n * `done(error)`.\n */\n\n\nfunction eachPage(pageCallback, done) {\n  var _this = this;\n\n  if (!isFunction_1.default(pageCallback)) {\n    throw new Error('The first parameter to `eachPage` must be a function');\n  }\n\n  if (!isFunction_1.default(done) && done !== void 0) {\n    throw new Error('The second parameter to `eachPage` must be a function or undefined');\n  }\n\n  var path = \"/\" + this._table._urlEncodedNameOrId();\n\n  var params = __assign({}, this._params);\n\n  var inner = function inner() {\n    _this._table._base.runAction('get', path, params, null, function (err, response, result) {\n      if (err) {\n        done(err, null);\n      } else {\n        var next = void 0;\n\n        if (result.offset) {\n          params.offset = result.offset;\n          next = inner;\n        } else {\n          next = function next() {\n            done(null);\n          };\n        }\n\n        var records = result.records.map(function (recordJson) {\n          return new record_1.default(_this._table, null, recordJson);\n        });\n        pageCallback(records, next);\n      }\n    });\n  };\n\n  inner();\n}\n/**\n * Fetches all pages of results asynchronously. May take a long time.\n */\n\n\nfunction all(done) {\n  if (!isFunction_1.default(done)) {\n    throw new Error('The first parameter to `all` must be a function');\n  }\n\n  var allRecords = [];\n  this.eachPage(function (pageRecords, fetchNextPage) {\n    allRecords.push.apply(allRecords, pageRecords);\n    fetchNextPage();\n  }, function (err) {\n    if (err) {\n      done(err, null);\n    } else {\n      done(null, allRecords);\n    }\n  });\n}\n\nmodule.exports = Query;","map":{"version":3,"mappings":"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","names":["table","params","_table","_params","firstPage","callback_to_promise_1","eachPage","all","Query","validParams","ignoredKeys","errors","_i","key","value","has_1","paramValidators","validator","validationResult","pass","push","error","query_params_1","done","isFunction_1","Error","records","pageCallback","path","_urlEncodedNameOrId","inner","_this","_base","runAction","err","response","result","next","offset","map","record_1","recordJson","allRecords","pageRecords","fetchNextPage","apply","module"],"sources":["../src/query.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}